(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'hello'"
p3
sS'layer'
p4
S'/Users/yugrajsingh/Desktop/UCSC_Classes/cs183/web2py/applications/ShopList/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n\ndef index():\n\tcreate_shoplist()\n\treturn dict()\n\n@auth.requires_login()\ndef addRecipe():\n\tform = SQLFORM(db.recipe)\n\tif form.process().accepted:\n\t\tresponse.flash = \'recipe created\'\n\t\tredirect (URL(\'recipes\'))\n\treturn dict(form=form)\n\t\n@auth.requires_login()\ndef create_shoplist():\n\tcheck = db(db.ShopList.author == auth.user_id).select().first()\n\tif check is None:\n\t\tresponse.flash = \'no shopping list, creating for user\'\n\t\tsuccess = db.ShopList.insert(author=auth.user_id)\n\telse:\n\t\tresponse.flash = \'shopping list exists for user\'\n\tcurrent_user = db(db.ShopList.author.contains(auth.user_id))\n\t##db.ShopList.insert()\n\n@auth.requires_login()\ndef viewRecipe():\n\tq = db.recipe.Author == auth.user_id\n\tgrid = SQLFORM.grid(q)\n\treturn dict(grid=grid)\n\t\t\n@auth.requires_login()\ndef recipes():\n\tif request.args(0) != None:\n\t\tcheck = db(db.recipe.id == request.args(0)).select().first()\n\t\tquery = db(db.ShopList.author == auth.user_id).select().first()\n\t\tif check != None:\n\t\t\tquery.cart = query.cart + check.ingredients\n\tq = db.recipe.public == True\n\tgrid = SQLFORM.grid(q, searchable=True, fields=[db.recipe.title, db.recipe.email], create=False, user_signature=False, editable=False, deletable=False,\n\tlinks=[dict(header=T(\'Add to Cart\'),\n\tbody=lambda r: A(\'Add\', _class=\'btn\',\n\t_href=URL(\'default\', \'recipes\', args=[r.id])))])\n\treturn dict(grid=grid)\n\ndef add_to_list():\n\treturn dict()\ndef addIngredients():\n    return dict()\n\ndef ingredients():\n    return dict()\n\ndef shoplist():\n    return dict()\n\ndef support():\n    return dict()\n\ndef user():\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(recipes)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/yugrajsingh/Desktop/UCSC_Classes/cs183/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/Users/yugrajsingh/Desktop/UCSC_Classes/cs183/web2py/applications/ShopList/controllers/default.py", line 109, in <module>\n  File "/Users/yugrajsingh/Desktop/UCSC_Classes/cs183/web2py/gluon/globals.py", line 372, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/yugrajsingh/Desktop/UCSC_Classes/cs183/web2py/gluon/tools.py", line 3239, in f\n    return action(*a, **b)\n  File "/Users/yugrajsingh/Desktop/UCSC_Classes/cs183/web2py/applications/ShopList/controllers/default.py", line 45, in recipes\n    check = db(db.recipe.id == request.args(0)).select().first()\n  File "/Users/yugrajsingh/Desktop/UCSC_Classes/cs183/web2py/gluon/dal.py", line 10087, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/Users/yugrajsingh/Desktop/UCSC_Classes/cs183/web2py/gluon/dal.py", line 2304, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/Users/yugrajsingh/Desktop/UCSC_Classes/cs183/web2py/gluon/dal.py", line 1738, in select\n    sql = self._select(query, fields, attributes)\n  File "/Users/yugrajsingh/Desktop/UCSC_Classes/cs183/web2py/gluon/dal.py", line 1649, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/Users/yugrajsingh/Desktop/UCSC_Classes/cs183/web2py/gluon/dal.py", line 1422, in expand\n    out = op(first, second, **optional_args)\n  File "/Users/yugrajsingh/Desktop/UCSC_Classes/cs183/web2py/gluon/dal.py", line 1325, in EQ\n    self.expand(second, first.type))\n  File "/Users/yugrajsingh/Desktop/UCSC_Classes/cs183/web2py/gluon/dal.py", line 1433, in expand\n    return str(self.represent(expression,field_type))\n  File "/Users/yugrajsingh/Desktop/UCSC_Classes/cs183/web2py/gluon/dal.py", line 1874, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'hello\'\n'
p11
s.